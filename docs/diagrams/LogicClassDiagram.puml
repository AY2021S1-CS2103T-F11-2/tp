@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class ModeParser
Class ABCBookParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface LogicABC <<Interface>>
Class LogicABCManager

Interface LogicMode <<Interface>>
Class LogicModeManager

}
note "ABC = Deliverable, \nMeeting, Contact" as N1

note "XYZ = Add, Delete, \nFind, etc" as N2

package Model{
Class HiddenModel #FFFFFF
}


Class HiddenOutside #FFFFFF
HiddenOutside ..> LogicABC
HiddenOutside ..> LogicMode

LogicABCManager .up.|> LogicABC
LogicModeManager .up.|> LogicMode
LogicABCManager --> ABCBookParser
LogicModeManager --> ModeParser
ABCBookParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicABCManager .left.> Command : executes >

LogicABCManager --> Model
Command .left.> Model


LogicABC ..> CommandResult
LogicABCManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml

@startuml
!include style.puml

scale 1.5

skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface Parser <<Interface>>
Class ABCBookParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command
}

Interface LogicDispatcher <<Interface>>
Class LogicDispatcherManager

note top of ABCBookParser: ABCBookParser = DeliverableBookParser\nMeetingBookParser, PersonBookParser

}

package Model{
class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> LogicDispatcher

LogicDispatcherManager .up.|> LogicDispatcher
LogicDispatcherManager -->"1" ABCBookParser
ABCBookParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> Parser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
LogicDispatcherManager .left.> Command : executes >

LogicDispatcherManager -> "0..1           " Model
Command .> "0..1    " Model

note bottom of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
LogicDispatcher ..> CommandResult
LogicDispatcherManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
